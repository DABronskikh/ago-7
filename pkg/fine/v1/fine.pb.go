// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: fine.proto

package v1

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SearchData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeDeparture *timestamp.Timestamp `protobuf:"bytes,1,opt,name=timeDeparture,proto3" json:"timeDeparture,omitempty"` //время вылета
	FromIATA      int64                `protobuf:"varint,2,opt,name=fromIATA,proto3" json:"fromIATA,omitempty"`          //IATA-код* аэропорта вылета
	ToIATA        int64                `protobuf:"varint,3,opt,name=toIATA,proto3" json:"toIATA,omitempty"`              //IATA-код* аэропорта прилёта
}

func (x *SearchData) Reset() {
	*x = SearchData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fine_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchData) ProtoMessage() {}

func (x *SearchData) ProtoReflect() protoreflect.Message {
	mi := &file_fine_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchData.ProtoReflect.Descriptor instead.
func (*SearchData) Descriptor() ([]byte, []int) {
	return file_fine_proto_rawDescGZIP(), []int{0}
}

func (x *SearchData) GetTimeDeparture() *timestamp.Timestamp {
	if x != nil {
		return x.TimeDeparture
	}
	return nil
}

func (x *SearchData) GetFromIATA() int64 {
	if x != nil {
		return x.FromIATA
	}
	return 0
}

func (x *SearchData) GetToIATA() int64 {
	if x != nil {
		return x.ToIATA
	}
	return 0
}

type FlightResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Flight `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *FlightResponse) Reset() {
	*x = FlightResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fine_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlightResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlightResponse) ProtoMessage() {}

func (x *FlightResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fine_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlightResponse.ProtoReflect.Descriptor instead.
func (*FlightResponse) Descriptor() ([]byte, []int) {
	return file_fine_proto_rawDescGZIP(), []int{1}
}

func (x *FlightResponse) GetItems() []*Flight {
	if x != nil {
		return x.Items
	}
	return nil
}

type Flight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                      //id
	Cost          int64                `protobuf:"varint,2,opt,name=cost,proto3" json:"cost,omitempty"`                  //стоимость
	TimeDeparture *timestamp.Timestamp `protobuf:"bytes,3,opt,name=timeDeparture,proto3" json:"timeDeparture,omitempty"` //время вылета
	TimeTravel    *timestamp.Timestamp `protobuf:"bytes,4,opt,name=timeTravel,proto3" json:"timeTravel,omitempty"`       //время прилета
	FromIATA      int64                `protobuf:"varint,5,opt,name=fromIATA,proto3" json:"fromIATA,omitempty"`          //IATA-код* аэропорта вылета
	ToIATA        int64                `protobuf:"varint,6,opt,name=toIATA,proto3" json:"toIATA,omitempty"`              //IATA-код* аэропорта прилёта
}

func (x *Flight) Reset() {
	*x = Flight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fine_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Flight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flight) ProtoMessage() {}

func (x *Flight) ProtoReflect() protoreflect.Message {
	mi := &file_fine_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flight.ProtoReflect.Descriptor instead.
func (*Flight) Descriptor() ([]byte, []int) {
	return file_fine_proto_rawDescGZIP(), []int{2}
}

func (x *Flight) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Flight) GetCost() int64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *Flight) GetTimeDeparture() *timestamp.Timestamp {
	if x != nil {
		return x.TimeDeparture
	}
	return nil
}

func (x *Flight) GetTimeTravel() *timestamp.Timestamp {
	if x != nil {
		return x.TimeTravel
	}
	return nil
}

func (x *Flight) GetFromIATA() int64 {
	if x != nil {
		return x.FromIATA
	}
	return 0
}

func (x *Flight) GetToIATA() int64 {
	if x != nil {
		return x.ToIATA
	}
	return 0
}

var File_fine_proto protoreflect.FileDescriptor

var file_fine_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x66, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x70, 0x6b,
	0x67, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x82, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x40,
	0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x41, 0x54, 0x41, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x41, 0x54, 0x41, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x6f, 0x49, 0x41, 0x54, 0x41, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x6f,
	0x49, 0x41, 0x54, 0x41, 0x22, 0x40, 0x0a, 0x0e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x66, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xde, 0x01, 0x0a, 0x06, 0x46, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x65, 0x70,
	0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x54,
	0x72, 0x61, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61,
	0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x41, 0x54, 0x41, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x41, 0x54, 0x41, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x6f, 0x49, 0x41, 0x54, 0x41, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x74, 0x6f, 0x49, 0x41, 0x54, 0x41, 0x32, 0x66, 0x0a, 0x11, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x0d,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x1c, 0x2e,
	0x70, 0x6b, 0x67, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x20, 0x2e, 0x70, 0x6b,
	0x67, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x42,
	0x2a, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x41,
	0x42, 0x72, 0x6f, 0x6e, 0x73, 0x6b, 0x69, 0x6b, 0x68, 0x2f, 0x61, 0x67, 0x6f, 0x2d, 0x36, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x66, 0x69, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_fine_proto_rawDescOnce sync.Once
	file_fine_proto_rawDescData = file_fine_proto_rawDesc
)

func file_fine_proto_rawDescGZIP() []byte {
	file_fine_proto_rawDescOnce.Do(func() {
		file_fine_proto_rawDescData = protoimpl.X.CompressGZIP(file_fine_proto_rawDescData)
	})
	return file_fine_proto_rawDescData
}

var file_fine_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_fine_proto_goTypes = []interface{}{
	(*SearchData)(nil),          // 0: pkg.grpc.fine.v1.SearchData
	(*FlightResponse)(nil),      // 1: pkg.grpc.fine.v1.FlightResponse
	(*Flight)(nil),              // 2: pkg.grpc.fine.v1.Flight
	(*timestamp.Timestamp)(nil), // 3: google.protobuf.Timestamp
}
var file_fine_proto_depIdxs = []int32{
	3, // 0: pkg.grpc.fine.v1.SearchData.timeDeparture:type_name -> google.protobuf.Timestamp
	2, // 1: pkg.grpc.fine.v1.FlightResponse.items:type_name -> pkg.grpc.fine.v1.Flight
	3, // 2: pkg.grpc.fine.v1.Flight.timeDeparture:type_name -> google.protobuf.Timestamp
	3, // 3: pkg.grpc.fine.v1.Flight.timeTravel:type_name -> google.protobuf.Timestamp
	0, // 4: pkg.grpc.fine.v1.AggregatorService.SearchFlights:input_type -> pkg.grpc.fine.v1.SearchData
	1, // 5: pkg.grpc.fine.v1.AggregatorService.SearchFlights:output_type -> pkg.grpc.fine.v1.FlightResponse
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_fine_proto_init() }
func file_fine_proto_init() {
	if File_fine_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fine_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fine_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlightResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fine_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Flight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fine_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fine_proto_goTypes,
		DependencyIndexes: file_fine_proto_depIdxs,
		MessageInfos:      file_fine_proto_msgTypes,
	}.Build()
	File_fine_proto = out.File
	file_fine_proto_rawDesc = nil
	file_fine_proto_goTypes = nil
	file_fine_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AggregatorServiceClient is the client API for AggregatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AggregatorServiceClient interface {
	SearchFlights(ctx context.Context, in *SearchData, opts ...grpc.CallOption) (AggregatorService_SearchFlightsClient, error)
}

type aggregatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAggregatorServiceClient(cc grpc.ClientConnInterface) AggregatorServiceClient {
	return &aggregatorServiceClient{cc}
}

func (c *aggregatorServiceClient) SearchFlights(ctx context.Context, in *SearchData, opts ...grpc.CallOption) (AggregatorService_SearchFlightsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AggregatorService_serviceDesc.Streams[0], "/pkg.grpc.fine.v1.AggregatorService/SearchFlights", opts...)
	if err != nil {
		return nil, err
	}
	x := &aggregatorServiceSearchFlightsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AggregatorService_SearchFlightsClient interface {
	Recv() (*FlightResponse, error)
	grpc.ClientStream
}

type aggregatorServiceSearchFlightsClient struct {
	grpc.ClientStream
}

func (x *aggregatorServiceSearchFlightsClient) Recv() (*FlightResponse, error) {
	m := new(FlightResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AggregatorServiceServer is the server API for AggregatorService service.
type AggregatorServiceServer interface {
	SearchFlights(*SearchData, AggregatorService_SearchFlightsServer) error
}

// UnimplementedAggregatorServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAggregatorServiceServer struct {
}

func (*UnimplementedAggregatorServiceServer) SearchFlights(*SearchData, AggregatorService_SearchFlightsServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchFlights not implemented")
}

func RegisterAggregatorServiceServer(s *grpc.Server, srv AggregatorServiceServer) {
	s.RegisterService(&_AggregatorService_serviceDesc, srv)
}

func _AggregatorService_SearchFlights_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchData)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AggregatorServiceServer).SearchFlights(m, &aggregatorServiceSearchFlightsServer{stream})
}

type AggregatorService_SearchFlightsServer interface {
	Send(*FlightResponse) error
	grpc.ServerStream
}

type aggregatorServiceSearchFlightsServer struct {
	grpc.ServerStream
}

func (x *aggregatorServiceSearchFlightsServer) Send(m *FlightResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _AggregatorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pkg.grpc.fine.v1.AggregatorService",
	HandlerType: (*AggregatorServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SearchFlights",
			Handler:       _AggregatorService_SearchFlights_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "fine.proto",
}
